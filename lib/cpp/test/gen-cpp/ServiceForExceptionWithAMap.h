/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ServiceForExceptionWithAMap_H
#define ServiceForExceptionWithAMap_H

#include <thrift/TDispatchProcessor.h>
#include "DebugProtoTest_types.h"

namespace thrift { namespace test { namespace debug {

class ServiceForExceptionWithAMapIf {
 public:
  virtual ~ServiceForExceptionWithAMapIf() {}
  virtual void methodThatThrowsAnException() = 0;
};

class ServiceForExceptionWithAMapIfFactory {
 public:
  typedef ServiceForExceptionWithAMapIf Handler;

  virtual ~ServiceForExceptionWithAMapIfFactory() {}

  virtual ServiceForExceptionWithAMapIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServiceForExceptionWithAMapIf* /* handler */) = 0;
};

class ServiceForExceptionWithAMapIfSingletonFactory : virtual public ServiceForExceptionWithAMapIfFactory {
 public:
  ServiceForExceptionWithAMapIfSingletonFactory(const boost::shared_ptr<ServiceForExceptionWithAMapIf>& iface) : iface_(iface) {}
  virtual ~ServiceForExceptionWithAMapIfSingletonFactory() {}

  virtual ServiceForExceptionWithAMapIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServiceForExceptionWithAMapIf* /* handler */) {}

 protected:
  boost::shared_ptr<ServiceForExceptionWithAMapIf> iface_;
};

class ServiceForExceptionWithAMapNull : virtual public ServiceForExceptionWithAMapIf {
 public:
  virtual ~ServiceForExceptionWithAMapNull() {}
  void methodThatThrowsAnException() {
    return;
  }
};


class ServiceForExceptionWithAMap_methodThatThrowsAnException_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ServiceForExceptionWithAMap_methodThatThrowsAnException_args() {
  }

  virtual ~ServiceForExceptionWithAMap_methodThatThrowsAnException_args() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  bool operator == (const ServiceForExceptionWithAMap_methodThatThrowsAnException_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ServiceForExceptionWithAMap_methodThatThrowsAnException_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceForExceptionWithAMap_methodThatThrowsAnException_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ServiceForExceptionWithAMap_methodThatThrowsAnException_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ServiceForExceptionWithAMap_methodThatThrowsAnException_pargs() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceForExceptionWithAMap_methodThatThrowsAnException_result__isset {
  _ServiceForExceptionWithAMap_methodThatThrowsAnException_result__isset() : xwamap(false) {}
  bool xwamap;
} _ServiceForExceptionWithAMap_methodThatThrowsAnException_result__isset;

class ServiceForExceptionWithAMap_methodThatThrowsAnException_result {
 public:

  static const char* ascii_fingerprint; // = "D1B4B6B1BF4770F917081088409B05FC";
  static const uint8_t binary_fingerprint[16]; // = {0xD1,0xB4,0xB6,0xB1,0xBF,0x47,0x70,0xF9,0x17,0x08,0x10,0x88,0x40,0x9B,0x05,0xFC};

  ServiceForExceptionWithAMap_methodThatThrowsAnException_result() {
  }

  virtual ~ServiceForExceptionWithAMap_methodThatThrowsAnException_result() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  ExceptionWithAMap xwamap;

  _ServiceForExceptionWithAMap_methodThatThrowsAnException_result__isset __isset;

  void __set_xwamap(const ExceptionWithAMap& val) {
    xwamap = val;
  }

  bool operator == (const ServiceForExceptionWithAMap_methodThatThrowsAnException_result & rhs) const
  {
    if (!(xwamap == rhs.xwamap))
      return false;
    return true;
  }
  bool operator != (const ServiceForExceptionWithAMap_methodThatThrowsAnException_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceForExceptionWithAMap_methodThatThrowsAnException_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceForExceptionWithAMap_methodThatThrowsAnException_presult__isset {
  _ServiceForExceptionWithAMap_methodThatThrowsAnException_presult__isset() : xwamap(false) {}
  bool xwamap;
} _ServiceForExceptionWithAMap_methodThatThrowsAnException_presult__isset;

class ServiceForExceptionWithAMap_methodThatThrowsAnException_presult {
 public:

  static const char* ascii_fingerprint; // = "D1B4B6B1BF4770F917081088409B05FC";
  static const uint8_t binary_fingerprint[16]; // = {0xD1,0xB4,0xB6,0xB1,0xBF,0x47,0x70,0xF9,0x17,0x08,0x10,0x88,0x40,0x9B,0x05,0xFC};


  virtual ~ServiceForExceptionWithAMap_methodThatThrowsAnException_presult() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  ExceptionWithAMap xwamap;

  _ServiceForExceptionWithAMap_methodThatThrowsAnException_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ServiceForExceptionWithAMapClient : virtual public ServiceForExceptionWithAMapIf {
 public:
  ServiceForExceptionWithAMapClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ServiceForExceptionWithAMapClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void methodThatThrowsAnException();
  void send_methodThatThrowsAnException();
  void recv_methodThatThrowsAnException();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServiceForExceptionWithAMapProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ServiceForExceptionWithAMapIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ServiceForExceptionWithAMapProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_methodThatThrowsAnException(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServiceForExceptionWithAMapProcessor(boost::shared_ptr<ServiceForExceptionWithAMapIf> iface) :
    iface_(iface) {
    processMap_["methodThatThrowsAnException"] = &ServiceForExceptionWithAMapProcessor::process_methodThatThrowsAnException;
  }

  virtual ~ServiceForExceptionWithAMapProcessor() {}
};

class ServiceForExceptionWithAMapProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServiceForExceptionWithAMapProcessorFactory(const ::boost::shared_ptr< ServiceForExceptionWithAMapIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ServiceForExceptionWithAMapIfFactory > handlerFactory_;
};

class ServiceForExceptionWithAMapMultiface : virtual public ServiceForExceptionWithAMapIf {
 public:
  ServiceForExceptionWithAMapMultiface(std::vector<boost::shared_ptr<ServiceForExceptionWithAMapIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServiceForExceptionWithAMapMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ServiceForExceptionWithAMapIf> > ifaces_;
  ServiceForExceptionWithAMapMultiface() {}
  void add(boost::shared_ptr<ServiceForExceptionWithAMapIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void methodThatThrowsAnException() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->methodThatThrowsAnException();
    }
    ifaces_[i]->methodThatThrowsAnException();
  }

};

}}} // namespace

#endif
