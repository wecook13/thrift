/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Srv_H
#define Srv_H

#include <thrift/TDispatchProcessor.h>
#include "DebugProtoTest_types.h"

namespace thrift { namespace test { namespace debug {

class SrvIf {
 public:
  virtual ~SrvIf() {}
  virtual int32_t Janky(const int32_t arg) = 0;
  virtual void voidMethod() = 0;
  virtual int32_t primitiveMethod() = 0;
  virtual void structMethod(CompactProtoTestStruct& _return) = 0;
  virtual void methodWithDefaultArgs(const int32_t something) = 0;
  virtual void onewayMethod() = 0;
};

class SrvIfFactory {
 public:
  typedef SrvIf Handler;

  virtual ~SrvIfFactory() {}

  virtual SrvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SrvIf* /* handler */) = 0;
};

class SrvIfSingletonFactory : virtual public SrvIfFactory {
 public:
  SrvIfSingletonFactory(const boost::shared_ptr<SrvIf>& iface) : iface_(iface) {}
  virtual ~SrvIfSingletonFactory() {}

  virtual SrvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SrvIf* /* handler */) {}

 protected:
  boost::shared_ptr<SrvIf> iface_;
};

class SrvNull : virtual public SrvIf {
 public:
  virtual ~SrvNull() {}
  int32_t Janky(const int32_t /* arg */) {
    int32_t _return = 0;
    return _return;
  }
  void voidMethod() {
    return;
  }
  int32_t primitiveMethod() {
    int32_t _return = 0;
    return _return;
  }
  void structMethod(CompactProtoTestStruct& /* _return */) {
    return;
  }
  void methodWithDefaultArgs(const int32_t /* something */) {
    return;
  }
  void onewayMethod() {
    return;
  }
};

typedef struct _Srv_Janky_args__isset {
  _Srv_Janky_args__isset() : arg(false) {}
  bool arg;
} _Srv_Janky_args__isset;

class Srv_Janky_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Srv_Janky_args() : arg(0) {
  }

  virtual ~Srv_Janky_args() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t arg;

  _Srv_Janky_args__isset __isset;

  void __set_arg(const int32_t val) {
    arg = val;
  }

  bool operator == (const Srv_Janky_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const Srv_Janky_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Srv_Janky_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Srv_Janky_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~Srv_Janky_pargs() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  const int32_t* arg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Srv_Janky_result__isset {
  _Srv_Janky_result__isset() : success(false) {}
  bool success;
} _Srv_Janky_result__isset;

class Srv_Janky_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Srv_Janky_result() : success(0) {
  }

  virtual ~Srv_Janky_result() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t success;

  _Srv_Janky_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Srv_Janky_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Srv_Janky_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Srv_Janky_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Srv_Janky_presult__isset {
  _Srv_Janky_presult__isset() : success(false) {}
  bool success;
} _Srv_Janky_presult__isset;

class Srv_Janky_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Srv_Janky_presult() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t* success;

  _Srv_Janky_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Srv_voidMethod_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Srv_voidMethod_args() {
  }

  virtual ~Srv_voidMethod_args() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  bool operator == (const Srv_voidMethod_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Srv_voidMethod_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Srv_voidMethod_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Srv_voidMethod_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Srv_voidMethod_pargs() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Srv_voidMethod_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Srv_voidMethod_result() {
  }

  virtual ~Srv_voidMethod_result() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  bool operator == (const Srv_voidMethod_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Srv_voidMethod_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Srv_voidMethod_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Srv_voidMethod_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Srv_voidMethod_presult() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Srv_primitiveMethod_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Srv_primitiveMethod_args() {
  }

  virtual ~Srv_primitiveMethod_args() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  bool operator == (const Srv_primitiveMethod_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Srv_primitiveMethod_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Srv_primitiveMethod_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Srv_primitiveMethod_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Srv_primitiveMethod_pargs() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Srv_primitiveMethod_result__isset {
  _Srv_primitiveMethod_result__isset() : success(false) {}
  bool success;
} _Srv_primitiveMethod_result__isset;

class Srv_primitiveMethod_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Srv_primitiveMethod_result() : success(0) {
  }

  virtual ~Srv_primitiveMethod_result() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t success;

  _Srv_primitiveMethod_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Srv_primitiveMethod_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Srv_primitiveMethod_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Srv_primitiveMethod_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Srv_primitiveMethod_presult__isset {
  _Srv_primitiveMethod_presult__isset() : success(false) {}
  bool success;
} _Srv_primitiveMethod_presult__isset;

class Srv_primitiveMethod_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Srv_primitiveMethod_presult() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t* success;

  _Srv_primitiveMethod_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Srv_structMethod_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Srv_structMethod_args() {
  }

  virtual ~Srv_structMethod_args() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  bool operator == (const Srv_structMethod_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Srv_structMethod_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Srv_structMethod_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Srv_structMethod_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Srv_structMethod_pargs() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Srv_structMethod_result__isset {
  _Srv_structMethod_result__isset() : success(false) {}
  bool success;
} _Srv_structMethod_result__isset;

class Srv_structMethod_result {
 public:

  static const char* ascii_fingerprint; // = "CECD9E21CC64072694E7BE9A3F0E40CF";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0xCD,0x9E,0x21,0xCC,0x64,0x07,0x26,0x94,0xE7,0xBE,0x9A,0x3F,0x0E,0x40,0xCF};

  Srv_structMethod_result() {
  }

  virtual ~Srv_structMethod_result() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  CompactProtoTestStruct success;

  _Srv_structMethod_result__isset __isset;

  void __set_success(const CompactProtoTestStruct& val) {
    success = val;
  }

  bool operator == (const Srv_structMethod_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Srv_structMethod_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Srv_structMethod_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Srv_structMethod_presult__isset {
  _Srv_structMethod_presult__isset() : success(false) {}
  bool success;
} _Srv_structMethod_presult__isset;

class Srv_structMethod_presult {
 public:

  static const char* ascii_fingerprint; // = "CECD9E21CC64072694E7BE9A3F0E40CF";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0xCD,0x9E,0x21,0xCC,0x64,0x07,0x26,0x94,0xE7,0xBE,0x9A,0x3F,0x0E,0x40,0xCF};


  virtual ~Srv_structMethod_presult() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  CompactProtoTestStruct* success;

  _Srv_structMethod_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Srv_methodWithDefaultArgs_args__isset {
  _Srv_methodWithDefaultArgs_args__isset() : something(true) {}
  bool something;
} _Srv_methodWithDefaultArgs_args__isset;

class Srv_methodWithDefaultArgs_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Srv_methodWithDefaultArgs_args() : something(2) {
  }

  virtual ~Srv_methodWithDefaultArgs_args() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  int32_t something;

  _Srv_methodWithDefaultArgs_args__isset __isset;

  void __set_something(const int32_t val) {
    something = val;
  }

  bool operator == (const Srv_methodWithDefaultArgs_args & rhs) const
  {
    if (!(something == rhs.something))
      return false;
    return true;
  }
  bool operator != (const Srv_methodWithDefaultArgs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Srv_methodWithDefaultArgs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Srv_methodWithDefaultArgs_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~Srv_methodWithDefaultArgs_pargs() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;

  const int32_t* something;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Srv_methodWithDefaultArgs_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Srv_methodWithDefaultArgs_result() {
  }

  virtual ~Srv_methodWithDefaultArgs_result() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  bool operator == (const Srv_methodWithDefaultArgs_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Srv_methodWithDefaultArgs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Srv_methodWithDefaultArgs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Srv_methodWithDefaultArgs_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Srv_methodWithDefaultArgs_presult() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Srv_onewayMethod_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Srv_onewayMethod_args() {
  }

  virtual ~Srv_onewayMethod_args() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  bool operator == (const Srv_onewayMethod_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Srv_onewayMethod_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Srv_onewayMethod_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Srv_onewayMethod_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Srv_onewayMethod_pargs() throw() {}

  static ::apache::thrift::reflection::local::TypeSpec* local_reflection;


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class SrvClient : virtual public SrvIf {
 public:
  SrvClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SrvClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Janky(const int32_t arg);
  void send_Janky(const int32_t arg);
  int32_t recv_Janky();
  void voidMethod();
  void send_voidMethod();
  void recv_voidMethod();
  int32_t primitiveMethod();
  void send_primitiveMethod();
  int32_t recv_primitiveMethod();
  void structMethod(CompactProtoTestStruct& _return);
  void send_structMethod();
  void recv_structMethod(CompactProtoTestStruct& _return);
  void methodWithDefaultArgs(const int32_t something);
  void send_methodWithDefaultArgs(const int32_t something);
  void recv_methodWithDefaultArgs();
  void onewayMethod();
  void send_onewayMethod();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SrvProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SrvIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SrvProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Janky(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_voidMethod(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_primitiveMethod(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_structMethod(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_methodWithDefaultArgs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_onewayMethod(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SrvProcessor(boost::shared_ptr<SrvIf> iface) :
    iface_(iface) {
    processMap_["Janky"] = &SrvProcessor::process_Janky;
    processMap_["voidMethod"] = &SrvProcessor::process_voidMethod;
    processMap_["primitiveMethod"] = &SrvProcessor::process_primitiveMethod;
    processMap_["structMethod"] = &SrvProcessor::process_structMethod;
    processMap_["methodWithDefaultArgs"] = &SrvProcessor::process_methodWithDefaultArgs;
    processMap_["onewayMethod"] = &SrvProcessor::process_onewayMethod;
  }

  virtual ~SrvProcessor() {}
};

class SrvProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SrvProcessorFactory(const ::boost::shared_ptr< SrvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SrvIfFactory > handlerFactory_;
};

class SrvMultiface : virtual public SrvIf {
 public:
  SrvMultiface(std::vector<boost::shared_ptr<SrvIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SrvMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SrvIf> > ifaces_;
  SrvMultiface() {}
  void add(boost::shared_ptr<SrvIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t Janky(const int32_t arg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Janky(arg);
    }
    return ifaces_[i]->Janky(arg);
  }

  void voidMethod() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->voidMethod();
    }
    ifaces_[i]->voidMethod();
  }

  int32_t primitiveMethod() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->primitiveMethod();
    }
    return ifaces_[i]->primitiveMethod();
  }

  void structMethod(CompactProtoTestStruct& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->structMethod(_return);
    }
    ifaces_[i]->structMethod(_return);
    return;
  }

  void methodWithDefaultArgs(const int32_t something) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->methodWithDefaultArgs(something);
    }
    ifaces_[i]->methodWithDefaultArgs(something);
  }

  void onewayMethod() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->onewayMethod();
    }
    ifaces_[i]->onewayMethod();
  }

};

}}} // namespace

#endif
