/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Service_H
#define Service_H

#include <thrift/TDispatchProcessor.h>
#include "StressTest_types.h"

namespace test { namespace stress {

class ServiceIf {
 public:
  virtual ~ServiceIf() {}
  virtual void echoVoid() = 0;
  virtual int8_t echoByte(const int8_t arg) = 0;
  virtual int32_t echoI32(const int32_t arg) = 0;
  virtual int64_t echoI64(const int64_t arg) = 0;
  virtual void echoString(std::string& _return, const std::string& arg) = 0;
  virtual void echoList(std::vector<int8_t> & _return, const std::vector<int8_t> & arg) = 0;
  virtual void echoSet(std::set<int8_t> & _return, const std::set<int8_t> & arg) = 0;
  virtual void echoMap(std::map<int8_t, int8_t> & _return, const std::map<int8_t, int8_t> & arg) = 0;
};

class ServiceIfFactory {
 public:
  typedef ServiceIf Handler;

  virtual ~ServiceIfFactory() {}

  virtual ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServiceIf* /* handler */) = 0;
};

class ServiceIfSingletonFactory : virtual public ServiceIfFactory {
 public:
  ServiceIfSingletonFactory(const boost::shared_ptr<ServiceIf>& iface) : iface_(iface) {}
  virtual ~ServiceIfSingletonFactory() {}

  virtual ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ServiceIf> iface_;
};

class ServiceNull : virtual public ServiceIf {
 public:
  virtual ~ServiceNull() {}
  void echoVoid() {
    return;
  }
  int8_t echoByte(const int8_t /* arg */) {
    int8_t _return = 0;
    return _return;
  }
  int32_t echoI32(const int32_t /* arg */) {
    int32_t _return = 0;
    return _return;
  }
  int64_t echoI64(const int64_t /* arg */) {
    int64_t _return = 0;
    return _return;
  }
  void echoString(std::string& /* _return */, const std::string& /* arg */) {
    return;
  }
  void echoList(std::vector<int8_t> & /* _return */, const std::vector<int8_t> & /* arg */) {
    return;
  }
  void echoSet(std::set<int8_t> & /* _return */, const std::set<int8_t> & /* arg */) {
    return;
  }
  void echoMap(std::map<int8_t, int8_t> & /* _return */, const std::map<int8_t, int8_t> & /* arg */) {
    return;
  }
};


class Service_echoVoid_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Service_echoVoid_args() {
  }

  virtual ~Service_echoVoid_args() throw() {}


  bool operator == (const Service_echoVoid_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Service_echoVoid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoVoid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_echoVoid_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Service_echoVoid_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_echoVoid_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Service_echoVoid_result() {
  }

  virtual ~Service_echoVoid_result() throw() {}


  bool operator == (const Service_echoVoid_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Service_echoVoid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoVoid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_echoVoid_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Service_echoVoid_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_echoByte_args__isset {
  _Service_echoByte_args__isset() : arg(false) {}
  bool arg;
} _Service_echoByte_args__isset;

class Service_echoByte_args {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};

  Service_echoByte_args() : arg(0) {
  }

  virtual ~Service_echoByte_args() throw() {}

  int8_t arg;

  _Service_echoByte_args__isset __isset;

  void __set_arg(const int8_t val) {
    arg = val;
  }

  bool operator == (const Service_echoByte_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const Service_echoByte_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoByte_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_echoByte_pargs {
 public:

  static const char* ascii_fingerprint; // = "A7D440367E85134EBDBAA7BCA01056D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xD4,0x40,0x36,0x7E,0x85,0x13,0x4E,0xBD,0xBA,0xA7,0xBC,0xA0,0x10,0x56,0xD0};


  virtual ~Service_echoByte_pargs() throw() {}

  const int8_t* arg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_echoByte_result__isset {
  _Service_echoByte_result__isset() : success(false) {}
  bool success;
} _Service_echoByte_result__isset;

class Service_echoByte_result {
 public:

  static const char* ascii_fingerprint; // = "508A6EF1C84BD28CDBD0D21C132C2613";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x8A,0x6E,0xF1,0xC8,0x4B,0xD2,0x8C,0xDB,0xD0,0xD2,0x1C,0x13,0x2C,0x26,0x13};

  Service_echoByte_result() : success(0) {
  }

  virtual ~Service_echoByte_result() throw() {}

  int8_t success;

  _Service_echoByte_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const Service_echoByte_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Service_echoByte_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoByte_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_echoByte_presult__isset {
  _Service_echoByte_presult__isset() : success(false) {}
  bool success;
} _Service_echoByte_presult__isset;

class Service_echoByte_presult {
 public:

  static const char* ascii_fingerprint; // = "508A6EF1C84BD28CDBD0D21C132C2613";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x8A,0x6E,0xF1,0xC8,0x4B,0xD2,0x8C,0xDB,0xD0,0xD2,0x1C,0x13,0x2C,0x26,0x13};


  virtual ~Service_echoByte_presult() throw() {}

  int8_t* success;

  _Service_echoByte_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_echoI32_args__isset {
  _Service_echoI32_args__isset() : arg(false) {}
  bool arg;
} _Service_echoI32_args__isset;

class Service_echoI32_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Service_echoI32_args() : arg(0) {
  }

  virtual ~Service_echoI32_args() throw() {}

  int32_t arg;

  _Service_echoI32_args__isset __isset;

  void __set_arg(const int32_t val) {
    arg = val;
  }

  bool operator == (const Service_echoI32_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const Service_echoI32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoI32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_echoI32_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~Service_echoI32_pargs() throw() {}

  const int32_t* arg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_echoI32_result__isset {
  _Service_echoI32_result__isset() : success(false) {}
  bool success;
} _Service_echoI32_result__isset;

class Service_echoI32_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Service_echoI32_result() : success(0) {
  }

  virtual ~Service_echoI32_result() throw() {}

  int32_t success;

  _Service_echoI32_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Service_echoI32_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Service_echoI32_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoI32_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_echoI32_presult__isset {
  _Service_echoI32_presult__isset() : success(false) {}
  bool success;
} _Service_echoI32_presult__isset;

class Service_echoI32_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Service_echoI32_presult() throw() {}

  int32_t* success;

  _Service_echoI32_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_echoI64_args__isset {
  _Service_echoI64_args__isset() : arg(false) {}
  bool arg;
} _Service_echoI64_args__isset;

class Service_echoI64_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  Service_echoI64_args() : arg(0) {
  }

  virtual ~Service_echoI64_args() throw() {}

  int64_t arg;

  _Service_echoI64_args__isset __isset;

  void __set_arg(const int64_t val) {
    arg = val;
  }

  bool operator == (const Service_echoI64_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const Service_echoI64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoI64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_echoI64_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~Service_echoI64_pargs() throw() {}

  const int64_t* arg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_echoI64_result__isset {
  _Service_echoI64_result__isset() : success(false) {}
  bool success;
} _Service_echoI64_result__isset;

class Service_echoI64_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  Service_echoI64_result() : success(0) {
  }

  virtual ~Service_echoI64_result() throw() {}

  int64_t success;

  _Service_echoI64_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const Service_echoI64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Service_echoI64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoI64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_echoI64_presult__isset {
  _Service_echoI64_presult__isset() : success(false) {}
  bool success;
} _Service_echoI64_presult__isset;

class Service_echoI64_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~Service_echoI64_presult() throw() {}

  int64_t* success;

  _Service_echoI64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_echoString_args__isset {
  _Service_echoString_args__isset() : arg(false) {}
  bool arg;
} _Service_echoString_args__isset;

class Service_echoString_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Service_echoString_args() : arg() {
  }

  virtual ~Service_echoString_args() throw() {}

  std::string arg;

  _Service_echoString_args__isset __isset;

  void __set_arg(const std::string& val) {
    arg = val;
  }

  bool operator == (const Service_echoString_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const Service_echoString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_echoString_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~Service_echoString_pargs() throw() {}

  const std::string* arg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_echoString_result__isset {
  _Service_echoString_result__isset() : success(false) {}
  bool success;
} _Service_echoString_result__isset;

class Service_echoString_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  Service_echoString_result() : success() {
  }

  virtual ~Service_echoString_result() throw() {}

  std::string success;

  _Service_echoString_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Service_echoString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Service_echoString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_echoString_presult__isset {
  _Service_echoString_presult__isset() : success(false) {}
  bool success;
} _Service_echoString_presult__isset;

class Service_echoString_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~Service_echoString_presult() throw() {}

  std::string* success;

  _Service_echoString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_echoList_args__isset {
  _Service_echoList_args__isset() : arg(false) {}
  bool arg;
} _Service_echoList_args__isset;

class Service_echoList_args {
 public:

  static const char* ascii_fingerprint; // = "1F71178153FA37316E045C21ACA93767";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x71,0x17,0x81,0x53,0xFA,0x37,0x31,0x6E,0x04,0x5C,0x21,0xAC,0xA9,0x37,0x67};

  Service_echoList_args() {
  }

  virtual ~Service_echoList_args() throw() {}

  std::vector<int8_t>  arg;

  _Service_echoList_args__isset __isset;

  void __set_arg(const std::vector<int8_t> & val) {
    arg = val;
  }

  bool operator == (const Service_echoList_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const Service_echoList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_echoList_pargs {
 public:

  static const char* ascii_fingerprint; // = "1F71178153FA37316E045C21ACA93767";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x71,0x17,0x81,0x53,0xFA,0x37,0x31,0x6E,0x04,0x5C,0x21,0xAC,0xA9,0x37,0x67};


  virtual ~Service_echoList_pargs() throw() {}

  const std::vector<int8_t> * arg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_echoList_result__isset {
  _Service_echoList_result__isset() : success(false) {}
  bool success;
} _Service_echoList_result__isset;

class Service_echoList_result {
 public:

  static const char* ascii_fingerprint; // = "9822855342321F8C66B3BF1B31E224E4";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x22,0x85,0x53,0x42,0x32,0x1F,0x8C,0x66,0xB3,0xBF,0x1B,0x31,0xE2,0x24,0xE4};

  Service_echoList_result() {
  }

  virtual ~Service_echoList_result() throw() {}

  std::vector<int8_t>  success;

  _Service_echoList_result__isset __isset;

  void __set_success(const std::vector<int8_t> & val) {
    success = val;
  }

  bool operator == (const Service_echoList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Service_echoList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_echoList_presult__isset {
  _Service_echoList_presult__isset() : success(false) {}
  bool success;
} _Service_echoList_presult__isset;

class Service_echoList_presult {
 public:

  static const char* ascii_fingerprint; // = "9822855342321F8C66B3BF1B31E224E4";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x22,0x85,0x53,0x42,0x32,0x1F,0x8C,0x66,0xB3,0xBF,0x1B,0x31,0xE2,0x24,0xE4};


  virtual ~Service_echoList_presult() throw() {}

  std::vector<int8_t> * success;

  _Service_echoList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_echoSet_args__isset {
  _Service_echoSet_args__isset() : arg(false) {}
  bool arg;
} _Service_echoSet_args__isset;

class Service_echoSet_args {
 public:

  static const char* ascii_fingerprint; // = "ED814FEF7731568DB14EC907AE011B59";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0x81,0x4F,0xEF,0x77,0x31,0x56,0x8D,0xB1,0x4E,0xC9,0x07,0xAE,0x01,0x1B,0x59};

  Service_echoSet_args() {
  }

  virtual ~Service_echoSet_args() throw() {}

  std::set<int8_t>  arg;

  _Service_echoSet_args__isset __isset;

  void __set_arg(const std::set<int8_t> & val) {
    arg = val;
  }

  bool operator == (const Service_echoSet_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const Service_echoSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_echoSet_pargs {
 public:

  static const char* ascii_fingerprint; // = "ED814FEF7731568DB14EC907AE011B59";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0x81,0x4F,0xEF,0x77,0x31,0x56,0x8D,0xB1,0x4E,0xC9,0x07,0xAE,0x01,0x1B,0x59};


  virtual ~Service_echoSet_pargs() throw() {}

  const std::set<int8_t> * arg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_echoSet_result__isset {
  _Service_echoSet_result__isset() : success(false) {}
  bool success;
} _Service_echoSet_result__isset;

class Service_echoSet_result {
 public:

  static const char* ascii_fingerprint; // = "03E65F09FA2B1AF83FA68E419D4AC3E7";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0xE6,0x5F,0x09,0xFA,0x2B,0x1A,0xF8,0x3F,0xA6,0x8E,0x41,0x9D,0x4A,0xC3,0xE7};

  Service_echoSet_result() {
  }

  virtual ~Service_echoSet_result() throw() {}

  std::set<int8_t>  success;

  _Service_echoSet_result__isset __isset;

  void __set_success(const std::set<int8_t> & val) {
    success = val;
  }

  bool operator == (const Service_echoSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Service_echoSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_echoSet_presult__isset {
  _Service_echoSet_presult__isset() : success(false) {}
  bool success;
} _Service_echoSet_presult__isset;

class Service_echoSet_presult {
 public:

  static const char* ascii_fingerprint; // = "03E65F09FA2B1AF83FA68E419D4AC3E7";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0xE6,0x5F,0x09,0xFA,0x2B,0x1A,0xF8,0x3F,0xA6,0x8E,0x41,0x9D,0x4A,0xC3,0xE7};


  virtual ~Service_echoSet_presult() throw() {}

  std::set<int8_t> * success;

  _Service_echoSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_echoMap_args__isset {
  _Service_echoMap_args__isset() : arg(false) {}
  bool arg;
} _Service_echoMap_args__isset;

class Service_echoMap_args {
 public:

  static const char* ascii_fingerprint; // = "C22A8B2A7F4CA3D4D2E357CCDE372E17";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x2A,0x8B,0x2A,0x7F,0x4C,0xA3,0xD4,0xD2,0xE3,0x57,0xCC,0xDE,0x37,0x2E,0x17};

  Service_echoMap_args() {
  }

  virtual ~Service_echoMap_args() throw() {}

  std::map<int8_t, int8_t>  arg;

  _Service_echoMap_args__isset __isset;

  void __set_arg(const std::map<int8_t, int8_t> & val) {
    arg = val;
  }

  bool operator == (const Service_echoMap_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const Service_echoMap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoMap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_echoMap_pargs {
 public:

  static const char* ascii_fingerprint; // = "C22A8B2A7F4CA3D4D2E357CCDE372E17";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x2A,0x8B,0x2A,0x7F,0x4C,0xA3,0xD4,0xD2,0xE3,0x57,0xCC,0xDE,0x37,0x2E,0x17};


  virtual ~Service_echoMap_pargs() throw() {}

  const std::map<int8_t, int8_t> * arg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_echoMap_result__isset {
  _Service_echoMap_result__isset() : success(false) {}
  bool success;
} _Service_echoMap_result__isset;

class Service_echoMap_result {
 public:

  static const char* ascii_fingerprint; // = "EE4248A7FF4452DB284560F9EB8D2A21";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x42,0x48,0xA7,0xFF,0x44,0x52,0xDB,0x28,0x45,0x60,0xF9,0xEB,0x8D,0x2A,0x21};

  Service_echoMap_result() {
  }

  virtual ~Service_echoMap_result() throw() {}

  std::map<int8_t, int8_t>  success;

  _Service_echoMap_result__isset __isset;

  void __set_success(const std::map<int8_t, int8_t> & val) {
    success = val;
  }

  bool operator == (const Service_echoMap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Service_echoMap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_echoMap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_echoMap_presult__isset {
  _Service_echoMap_presult__isset() : success(false) {}
  bool success;
} _Service_echoMap_presult__isset;

class Service_echoMap_presult {
 public:

  static const char* ascii_fingerprint; // = "EE4248A7FF4452DB284560F9EB8D2A21";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x42,0x48,0xA7,0xFF,0x44,0x52,0xDB,0x28,0x45,0x60,0xF9,0xEB,0x8D,0x2A,0x21};


  virtual ~Service_echoMap_presult() throw() {}

  std::map<int8_t, int8_t> * success;

  _Service_echoMap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ServiceClient : virtual public ServiceIf {
 public:
  ServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echoVoid();
  void send_echoVoid();
  void recv_echoVoid();
  int8_t echoByte(const int8_t arg);
  void send_echoByte(const int8_t arg);
  int8_t recv_echoByte();
  int32_t echoI32(const int32_t arg);
  void send_echoI32(const int32_t arg);
  int32_t recv_echoI32();
  int64_t echoI64(const int64_t arg);
  void send_echoI64(const int64_t arg);
  int64_t recv_echoI64();
  void echoString(std::string& _return, const std::string& arg);
  void send_echoString(const std::string& arg);
  void recv_echoString(std::string& _return);
  void echoList(std::vector<int8_t> & _return, const std::vector<int8_t> & arg);
  void send_echoList(const std::vector<int8_t> & arg);
  void recv_echoList(std::vector<int8_t> & _return);
  void echoSet(std::set<int8_t> & _return, const std::set<int8_t> & arg);
  void send_echoSet(const std::set<int8_t> & arg);
  void recv_echoSet(std::set<int8_t> & _return);
  void echoMap(std::map<int8_t, int8_t> & _return, const std::map<int8_t, int8_t> & arg);
  void send_echoMap(const std::map<int8_t, int8_t> & arg);
  void recv_echoMap(std::map<int8_t, int8_t> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_echoVoid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_echoByte(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_echoI32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_echoI64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_echoString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_echoList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_echoSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_echoMap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServiceProcessor(boost::shared_ptr<ServiceIf> iface) :
    iface_(iface) {
    processMap_["echoVoid"] = &ServiceProcessor::process_echoVoid;
    processMap_["echoByte"] = &ServiceProcessor::process_echoByte;
    processMap_["echoI32"] = &ServiceProcessor::process_echoI32;
    processMap_["echoI64"] = &ServiceProcessor::process_echoI64;
    processMap_["echoString"] = &ServiceProcessor::process_echoString;
    processMap_["echoList"] = &ServiceProcessor::process_echoList;
    processMap_["echoSet"] = &ServiceProcessor::process_echoSet;
    processMap_["echoMap"] = &ServiceProcessor::process_echoMap;
  }

  virtual ~ServiceProcessor() {}
};

class ServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServiceProcessorFactory(const ::boost::shared_ptr< ServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ServiceIfFactory > handlerFactory_;
};

class ServiceMultiface : virtual public ServiceIf {
 public:
  ServiceMultiface(std::vector<boost::shared_ptr<ServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ServiceIf> > ifaces_;
  ServiceMultiface() {}
  void add(boost::shared_ptr<ServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void echoVoid() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echoVoid();
    }
    ifaces_[i]->echoVoid();
  }

  int8_t echoByte(const int8_t arg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echoByte(arg);
    }
    return ifaces_[i]->echoByte(arg);
  }

  int32_t echoI32(const int32_t arg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echoI32(arg);
    }
    return ifaces_[i]->echoI32(arg);
  }

  int64_t echoI64(const int64_t arg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echoI64(arg);
    }
    return ifaces_[i]->echoI64(arg);
  }

  void echoString(std::string& _return, const std::string& arg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echoString(_return, arg);
    }
    ifaces_[i]->echoString(_return, arg);
    return;
  }

  void echoList(std::vector<int8_t> & _return, const std::vector<int8_t> & arg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echoList(_return, arg);
    }
    ifaces_[i]->echoList(_return, arg);
    return;
  }

  void echoSet(std::set<int8_t> & _return, const std::set<int8_t> & arg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echoSet(_return, arg);
    }
    ifaces_[i]->echoSet(_return, arg);
    return;
  }

  void echoMap(std::map<int8_t, int8_t> & _return, const std::map<int8_t, int8_t> & arg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echoMap(_return, arg);
    }
    ifaces_[i]->echoMap(_return, arg);
    return;
  }

};

}} // namespace

#endif
